

can be used in mutiple XC threads, each thread having its own task list and context.

simply invoke the macro XCSchedulerCreateTask(mytask1) for converting a function into a task
and then call yield() as much as possible, like in a default select case

it is possible to pass an unsigned parameter to the created task by simply using the other macro: 
XCSchedulerCreateTaskParam( mytask1, value). 
This is usefull to create multiple instance of a single code source, 
where "value" can be used to adjust code behaviour depending on the creator request. 
This "value" is simply passed as an optional parameter (register r0) to the task function.
a second optional parameter is also passed in r1, pointing on the task name (char *)
finally the task context (aka tcb) is passed in r2 as a third optional parameter

remark:
-for each xcore thread, a task list is maintained, where the task are appened in the creation order
-for each task created, the stack is allocated once with malloc() based on the compiler nstackwords information.
-if a task ends (reach its end of code) it will be removed from the list: stack is deallocated with free(), 
  and control is passed back to main task who created it, as we do not trust the context of next task in the list
- yield() instruction imediately stores the current task context and jump to the next one in the list.
 if none, it returns to the yield() of the thread considered as the maintask.
- it is possible to "yield" for a certain amount of time in cpu cycle with yieldDelay(x)
 this can be compared to a "delay" function where the spare time is given to any other task in the list.
 - it is possible to "yield" while there is no token nor data in a given chanend with yielChanend(ch)
 by commenting line 51 of the XCSchedulerYield.s, it is possible to change the behavior of yield():
 instead of going through all the tasks in the list, it switches back an forth with the main task.
 this is ideal to give maximum cpu time to a main select statement.

 file lib_XCscheduler_1.xc is an example. copy paste in in your application folder or just include it from a dummy main.xc file.
 or remove it from the EXCLUDE_FILES line in the module_build_info file.
 
 file demo_ep0_tasks is a proof of concept able to reuse cpu time from Endpoint0 in an usb application.
 To make it work , it is mandatory to add a function call to XUD_UserYieldChanend(ch) before the "testct" statement 
 in the function XUD_GetSetupBuffer from XUD_EpFunctions.c
 see this post: https://www.xcore.com/viewtopic.php?p=40481#p40481
 It can be removed from module compilation, either by removing "examples" in the line SOURCE_DIRS 
 or adding it in EXCLUDE_FILES from module_build_info
 